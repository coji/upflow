generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider  = "prisma-kysely"
  output    = "../app/services/"
  fileName  = "type.ts"
  camelCase = true
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean   @map("email_verified")
  image         String?
  role          String
  banned        Boolean?
  banReason     String?   @map("ban_reason")
  banExpires    DateTime? @map("ban_expires")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  sessions    Session[]
  accounts    Account[]
  members     Member[]
  invitations Invitation[]

  @@map("users")
}

model OrganizationSetting {
  id             String       @id @default(cuid())
  organizationId String       @unique @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  releaseDetectionMethod String   @default("branch") @map("release_detection_method")
  releaseDetectionKey    String   @default("production") @map("release_detection_key")
  isActive               Boolean  @default(true) @map("is_active")
  updatedAt              DateTime @updatedAt @map("updated_at")
  createdAt              DateTime @default(now()) @map("created_at")

  @@map("organization_settings")
}

model Integration {
  id           String  @id @default(cuid())
  provider     String
  method       String
  privateToken String? @map("private_token")

  organizationId String       @unique @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  repositories Repository[]

  @@index([organizationId])
  @@map("integrations")
}

model Repository {
  id                     String        @id
  integrationId          String        @map("integration_id")
  provider               String
  owner                  String
  repo                   String
  releaseDetectionMethod String        @default("branch") @map("release_detection_method")
  releaseDetectionKey    String        @default("production") @map("release_detection_key")
  updatedAt              DateTime      @updatedAt @map("updated_at")
  createdAt              DateTime      @default(now()) @map("created_at")
  integration            Integration   @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  pullrequest            PullRequest[]

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, integrationId, owner, repo])
  @@index([organizationId])
  @@map("repositories")
}

model PullRequest {
  repo                 String
  number               Int
  sourceBranch         String     @map("source_branch")
  targetBranch         String     @map("target_branch")
  state                String
  author               String
  title                String
  url                  String
  firstCommittedAt     String?    @map("first_committed_at")
  pullRequestCreatedAt String     @map("pull_request_created_at")
  firstReviewedAt      String?    @map("first_reviewed_at")
  mergedAt             String?    @map("merged_at")
  releasedAt           String?    @map("released_at")
  codingTime           Float?     @map("coding_time")
  pickupTime           Float?     @map("pickup_time")
  reviewTime           Float?     @map("review_time")
  deployTime           Float?     @map("deploy_time")
  totalTime            Float?     @map("total_time")
  repositoryId         String     @map("repository_id")
  updatedAt            String?    @map("updated_at")
  repository           Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@id([repositoryId, number])
  @@map("pull_requests")
}

model ExportSetting {
  id          String   @id @default(cuid())
  sheetId     String   @map("sheet_id")
  clientEmail String   @map("client_email")
  privateKey  String   @map("private_key")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")

  organizationId String       @unique @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("export_settings")
}

model CompanyGithubUser {
  userId      String?  @map("user_id")
  login       String
  name        String?
  email       String?
  pictureUrl  String?  @map("picture_url")
  displayName String   @map("display_name")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([organizationId, login])
  @@index([organizationId])
  @@map("company_github_users")
}

model Session {
  id                   String   @id
  expiresAt            DateTime @map("expires_at")
  token                String
  createdAt            DateTime @map("created_at")
  updatedAt            DateTime @map("updated_at")
  ipAddress            String?  @map("ip_address")
  userAgent            String?  @map("user_agent")
  userId               String   @map("user_id")
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy       String?  @map("impersonated_by")
  activeOrganizationId String?  @map("active_organization_id")

  @@unique([token])
  @@map("sessions")
}

model Account {
  id                    String    @id
  accountId             String    @map("account_id")
  providerId            String    @map("provider_id")
  userId                String    @map("user_id")
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @map("access_token")
  refreshToken          String?   @map("refresh_token")
  idToken               String?   @map("id_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?
  password              String?
  createdAt             DateTime  @map("created_at")
  updatedAt             DateTime  @map("updated_at")

  @@map("accounts")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime  @map("expires_at")
  createdAt  DateTime? @map("created_at")
  updatedAt  DateTime? @map("updated_at")

  @@map("verifications")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime     @default(now()) @map("created_at")
  metadata    String?
  members     Member[]
  invitations Invitation[]

  setting       OrganizationSetting?
  exportSetting ExportSetting?
  integration   Integration?
  repositories  Repository[]
  githubUsers   CompanyGithubUser[]

  @@unique([slug])
  @@map("organizations")
}

model Member {
  id             String       @id
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String       @map("user_id")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime     @map("created_at")

  @@map("members")
}

model Invitation {
  id             String       @id
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime     @map("expires_at")
  inviterId      String       @map("inviter_id")
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitations")
}
