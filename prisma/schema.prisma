generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(cuid())
  email     String        @unique
  name      String        @default("")
  updatedAt DateTime      @updatedAt
  createdAt DateTime      @default(now())
  companies CompanyUser[]
  password  Password?
  teams     Team[]
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id           String        @id @default(cuid())
  name         String
  updatedAt    DateTime      @updatedAt
  createdAt    DateTime      @default(now())
  users        CompanyUser[]
  integration  Integration?
  repositories Repository[]
  teams        Team[]
}

model CompanyUser {
  id          String    @id @default(cuid())
  companyId   String
  userId      String
  role        String
  invitedAt   DateTime?
  activatedAt DateTime?
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company   @relation(fields: [companyId], references: [id])
}

model Team {
  id        String  @id @default(cuid())
  name      String
  companyId String
  company   Company @relation(fields: [companyId], references: [id])
  users     User[]
}

model Integration {
  id           String       @id @default(cuid())
  provider     String
  method       String
  privateToken String?
  companyId    String       @unique
  company      Company      @relation(fields: [companyId], references: [id])
  repositories Repository[]
}

model Repository {
  id            String         @id @default(cuid())
  integrationId String
  provider      String
  projectId     String
  companyId     String
  company       Company        @relation(fields: [companyId], references: [id])
  integration   Integration    @relation(fields: [integrationId], references: [id])
  mergerequest  MergeRequest[]
}

model MergeRequest {
  id                      String
  target_branch           String
  state                   String
  num_of_commits          Int?
  num_of_comments         Int?
  first_commited_at       String?
  mergerequest_created_at String
  first_reviewd_at        String?
  merged_at               String?
  released_at             String?
  is_release_committed    Boolean
  author                  String
  title                   String
  repositoryId            String
  repository              Repository @relation(fields: [repositoryId], references: [id])

  @@id([repositoryId, id])
}
