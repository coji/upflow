datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique
  name  String @default("")

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  password  Password?
  companies CompanyUser[]
  teams     Team[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Company {
  id   String @id @default(cuid())
  name String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  users        CompanyUser[]
  teams        Team[]
  integrations Integration[]
  repositories Repository[]
}

model CompanyUser {
  id          String    @id @default(cuid())
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId      String
  role        String
  invitedAt   DateTime?
  activatedAt DateTime?
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
}

model Team {
  id   String @id @default(cuid())
  name String

  company   Company @relation(fields: [companyId], references: [id])
  companyId String
  users     User[]
}

model Integration {
  id           String  @id @default(cuid())
  provider     String // github, gitlab, and so on...
  method       String // oauth2, token
  privateToken String?

  company      Company      @relation(fields: [companyId], references: [id])
  companyId    String
  repositories Repository[]
}

model Repository {
  id            String      @id @default(cuid())
  integration   Integration @relation(fields: [integrationId], references: [id])
  integrationId String
  provider      String // github, gitlab and so on...
  projectId     String // gitlab project id

  mergerequest MergeRequest[]
  company      Company        @relation(fields: [companyId], references: [id])
  companyId    String
}

model MergeRequest {
  id                      String  @id
  target_branch           String
  state                   String
  num_of_commits          Int?
  num_of_comments         Int?
  first_commited_at       String?
  mergerequest_created_at String
  first_reviewd_at        String?
  merged_at               String?
  released_at             String?
  is_release_committed    Boolean
  author                  String
  title                   String

  repository   Repository @relation(fields: [repositoryId], references: [id])
  repositoryId String
}
