generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(cuid())
  email     String        @unique
  name      String        @default("")
  updatedAt DateTime      @updatedAt
  createdAt DateTime      @default(now())
  companies CompanyUser[]
  password  Password?
  teams     Team[]
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id                     String         @id @default(cuid())
  name                   String
  releaseDetectionMethod String         @default("branch") // tags, branch
  releaseDetectionKey    String         @default("production") // release-*, main, ^master$
  updatedAt              DateTime       @updatedAt
  createdAt              DateTime       @default(now())
  users                  CompanyUser[]
  integration            Integration?
  repositories           Repository[]
  teams                  Team[]
  exportSetting          ExportSetting?
}

model CompanyUser {
  id          String    @id @default(cuid())
  companyId   String
  userId      String
  role        String
  invitedAt   DateTime?
  activatedAt DateTime?
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Team {
  id        String  @id @default(cuid())
  name      String
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  users     User[]
}

model Integration {
  id           String       @id @default(cuid())
  provider     String
  method       String
  privateToken String?
  companyId    String       @unique
  company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  repositories Repository[]
}

model Repository {
  id                     String        @id @default(cuid())
  integrationId          String
  provider               String
  name                   String        @default("")
  projectId              String? // GitLab only
  owner                  String? // GitHub only
  repo                   String? // GitHub only
  releaseDetectionMethod String        @default("branch") // tags, branch
  releaseDetectionKey    String        @default("production") // release-*, main, ^master$
  companyId              String
  company                Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  integration            Integration   @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  mergerequest           PullRequest[]

  @@unique([integrationId, provider, projectId, owner, repo])
}

model PullRequest {
  repo                 String // repository name / project name
  number               String // number / iid
  sourceBranch         String
  targetBranch         String
  state                String
  author               String
  title                String
  url                  String
  firstCommittedAt     String?
  pullRequestCreatedAt String
  firstReviewedAt      String?
  mergedAt             String?
  releasedAt           String?
  codingTime           Float?
  pickupTime           Float?
  reviewTime           Float?
  deployTime           Float?
  totalTime            Float?
  repositoryId         String
  repository           Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@id([repositoryId, number])
}

model ExportSetting {
  id          String  @id @default(cuid())
  companyId   String  @unique
  company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sheetId     String
  clientEmail String
  privateKey  String
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
}
