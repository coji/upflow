generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  displayName String
  pictureUrl  String?
  locale      String
  role        String        @default("user")
  updatedAt   DateTime      @updatedAt
  createdAt   DateTime      @default(now())
  companies   CompanyUser[]
  teamUser    TeamUser[]
}

model Company {
  id                     String         @id @default(cuid())
  name                   String
  releaseDetectionMethod String         @default("branch")
  releaseDetectionKey    String         @default("production")
  updatedAt              DateTime       @updatedAt
  createdAt              DateTime       @default(now())
  isActive               Boolean        @default(true)
  users                  CompanyUser[]
  exportSetting          ExportSetting?
  integration            Integration?
  repositories           Repository[]
  teams                  Team[]
}

model CompanyUser {
  companyId   String
  userId      String
  role        String
  invitedAt   DateTime?
  activatedAt DateTime?
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([companyId, userId])
}

model Team {
  id        String     @id @default(cuid())
  name      String
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  companyId String
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  teamUser  TeamUser[]
}

model TeamUser {
  teamId    String
  userId    String
  role      String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([teamId, userId])
}

model Integration {
  id           String       @id @default(cuid())
  provider     String
  method       String
  privateToken String?
  companyId    String       @unique
  company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  repositories Repository[]
}

model Repository {
  id                     String        @id @default(cuid())
  integrationId          String
  provider               String
  name                   String        @default("")
  projectId              String?
  owner                  String?
  repo                   String?
  releaseDetectionMethod String        @default("branch")
  releaseDetectionKey    String        @default("production")
  companyId              String
  integration            Integration   @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  company                Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  mergerequest           PullRequest[]

  @@unique([integrationId, provider, projectId, owner, repo])
}

model PullRequest {
  repo                 String
  number               Int
  sourceBranch         String
  targetBranch         String
  state                String
  author               String
  title                String
  url                  String
  firstCommittedAt     String?
  pullRequestCreatedAt String
  firstReviewedAt      String?
  mergedAt             String?
  releasedAt           String?
  codingTime           Float?
  pickupTime           Float?
  reviewTime           Float?
  deployTime           Float?
  totalTime            Float?
  repositoryId         String
  updatedAt            String?
  repository           Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@id([repositoryId, number])
}

model ExportSetting {
  id          String   @id @default(cuid())
  companyId   String   @unique
  sheetId     String
  clientEmail String
  privateKey  String
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Calendar {
  d         DateTime @unique(map: "sqlite_autoindex_calendar_1")
  dayofweek Int
  weekday   String
  quarter   Int
  year      Int
  month     Int
  day       Int
}
