diff --git a/lib/node-pre-gyp.js b/lib/node-pre-gyp.js
index dc18e749eaa8f072a6afd6fd61b77b73bc479aaa..064a2a3717c0ad09f596cd5bc9e2aca760359d27 100644
--- a/lib/node-pre-gyp.js
+++ b/lib/node-pre-gyp.js
@@ -83,7 +83,7 @@ function Run({ package_json_path = './package.json', argv }) {
   cli_commands.forEach((command) => {
     self.commands[command] = function(argvx, callback) {
       log.verbose('command', command, argvx);
-      return require('./' + command)(self, argvx, callback);
+      return
     };
   });
 
@@ -287,9 +287,6 @@ proto.usage = function usage() {
     '  Usage: node-pre-gyp <command> [options]',
     '',
     '  where <command> is one of:',
-    cli_commands.map((c) => {
-      return '    - ' + c + ' - ' + require('./' + c).usage;
-    }).join('\n'),
     '',
     'node-pre-gyp@' + this.version + '  ' + path.resolve(__dirname, '..'),
     'node@' + process.versions.node
diff --git a/lib/util/s3_setup.js b/lib/util/s3_setup.js
index 6b1b1a6c27c90418ee44739c6817985219974252..55617c28fae26d15b9cc2b3330d8d0c2c651fc5f 100644
--- a/lib/util/s3_setup.js
+++ b/lib/util/s3_setup.js
@@ -36,66 +36,20 @@ module.exports.detect = function(opts, config) {
 };
 
 module.exports.get_s3 = function(config) {
-
-  if (process.env.node_pre_gyp_mock_s3) {
-    // here we're mocking. node_pre_gyp_mock_s3 is the scratch directory
-    // for the mock code.
-    const AWSMock = require('mock-aws-s3');
-    const os = require('os');
-
-    AWSMock.config.basePath = `${os.tmpdir()}/mock`;
-
-    const s3 = AWSMock.S3();
-
-    // wrapped callback maker. fs calls return code of ENOENT but AWS.S3 returns
-    // NotFound.
-    const wcb = (fn) => (err, ...args) => {
-      if (err && err.code === 'ENOENT') {
-        err.code = 'NotFound';
-      }
-      return fn(err, ...args);
-    };
-
-    return {
-      listObjects(params, callback) {
-        return s3.listObjects(params, wcb(callback));
-      },
-      headObject(params, callback) {
-        return s3.headObject(params, wcb(callback));
-      },
-      deleteObject(params, callback) {
-        return s3.deleteObject(params, wcb(callback));
-      },
-      putObject(params, callback) {
-        return s3.putObject(params, wcb(callback));
-      }
-    };
-  }
-
-  // if not mocking then setup real s3.
-  const AWS = require('aws-sdk');
-
-  AWS.config.update(config);
-  const s3 = new AWS.S3();
-
-  // need to change if additional options need to be specified.
   return {
     listObjects(params, callback) {
-      return s3.listObjects(params, callback);
+      return
     },
     headObject(params, callback) {
-      return s3.headObject(params, callback);
+      return
     },
     deleteObject(params, callback) {
-      return s3.deleteObject(params, callback);
+      return
     },
     putObject(params, callback) {
-      return s3.putObject(params, callback);
+      return
     }
   };
-
-
-
 };
 
 //
@@ -105,59 +59,5 @@ module.exports.get_s3 = function(config) {
 // to fulfill reponses.
 module.exports.get_mockS3Http = function() {
   let mock_s3 = false;
-  if (!process.env.node_pre_gyp_mock_s3) {
-    return () => mock_s3;
-  }
-
-  const nock = require('nock');
-  // the bucket used for testing, as addressed by https.
-  const host = 'https://mapbox-node-pre-gyp-public-testing-bucket.s3.us-east-1.amazonaws.com';
-  const mockDir = process.env.node_pre_gyp_mock_s3 + '/mapbox-node-pre-gyp-public-testing-bucket';
-
-  // function to setup interceptors. they are "turned off" by setting mock_s3 to false.
-  const mock_http = () => {
-    // eslint-disable-next-line no-unused-vars
-    function get(uri, requestBody) {
-      const filepath = path.join(mockDir, uri.replace('%2B', '+'));
-
-      try {
-        fs.accessSync(filepath, fs.constants.R_OK);
-      } catch (e) {
-        return [404, 'not found\n'];
-      }
-
-      // the mock s3 functions just write to disk, so just read from it.
-      return [200, fs.createReadStream(filepath)];
-    }
-
-    // eslint-disable-next-line no-unused-vars
-    return nock(host)
-      .persist()
-      .get(() => mock_s3) // mock any uri for s3 when true
-      .reply(get);
-  };
-
-  // setup interceptors. they check the mock_s3 flag to determine whether to intercept.
-  mock_http(nock, host, mockDir);
-  // function to turn matching all requests to s3 on/off.
-  const mockS3Http = (action) => {
-    const previous = mock_s3;
-    if (action === 'off') {
-      mock_s3 = false;
-    } else if (action === 'on') {
-      mock_s3 = true;
-    } else if (action !== 'get') {
-      throw new Error(`illegal action for setMockHttp ${action}`);
-    }
-    return previous;
-  };
-
-  // call mockS3Http with the argument
-  // - 'on' - turn it on
-  // - 'off' - turn it off (used by fetch.test.js so it doesn't interfere with redirects)
-  // - 'get' - return true or false for 'on' or 'off'
-  return mockS3Http;
-};
-
-
-
+  return () => mock_s3;
+}
